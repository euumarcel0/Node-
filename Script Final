## NESSE SCRIPT ELE FAZ TUDO QUE ESTÁ DOCUMENTADO EM UM SÓ SCRIPT (esteja no mode ROOT), POREM LEMBRE DE ATUALIZAR PARA O SEU GIT CLONE E MUDAR O NOME DO REPOSITORIO QUE ESTA ACESANDO NO COMANDO CD ##

------------------------------------------------------------------------------------------------

#!/bin/bash

# Atualizar a Lista de Pacotes
su -
apt update

# Instalar Dependências
apt install apt-transport-https ca-certificates curl software-properties-common

# Adicionar Chave GPG do Docker
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Configurar Repositório Estável
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list

# Instalar Docker Engine
apt update
apt install docker-ce docker-ce-cli containerd.io

# Gerenciar o Docker como um Usuário Não-root (Opcional)
usermod -aG docker $USER
echo "Faça logout e login novamente ou reinicie o sistema para que as alterações tenham efeito."

# Verificar a Instalação do Docker
docker --version

# Parar o serviço Apache
systemctl stop apache2

# Desativar o Apache para inicialização automática
systemctl disable apache2

# Clone o Repositório do GitHub
git clone https://github.com/seu-usuario/seu-repositorio.git # altere para seu Repositorio Do GitHub

# Entrar no diretório do repositório
cd seu-repositorio    # altere para seu Repositorio Do GitHub

# Criar o Dockerfile e adicionar o conteúdo
cat <<EOL > Dockerfile
# Use uma imagem base do Node.js
FROM node:14

# Crie o diretório de trabalho
WORKDIR /usr/src/app

# Copie os arquivos de configuração e dependências
COPY package*.json ./

# Instale as dependências
RUN npm install

# Copie os arquivos do código-fonte
COPY . .

# Construa o aplicativo
RUN npm run build

# Exponha a porta em que o aplicativo será executado
EXPOSE 3000

# Comando para iniciar o aplicativo
CMD [ "npm", "start" ]
EOL

# Construa a Imagem Docker
docker build -t nome-do-seu-app .

# Execute o Contêiner Docker
docker run -p 80:3000 -d nome-do-seu-app

# Descubra o ID ou o nome do contêiner
docker ps -a

# Acesse o terminal do contêiner
docker exec -it <ID_DO_CONTEINER> /bin/bash
ls
exit

echo "Acesse o aplicativo no navegador: http://seu-endereco-ip:3000 ou http://seu-domínio:3000"
echo "Lembre-se de ajustar as configurações de porta, URL e outras configurações conforme necessário."

------------------------------------------------------------------------------------------------


